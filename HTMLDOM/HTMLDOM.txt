=======================================HTML DOM 教程==========================================================
DOM (Document Object Model) 译为文档对象模型，是 HTML 和 XML 文档的编程接口。

DOM 以树结构表达 HTML 文档。
DOM 是 W3C（万维网联盟）的标准。
"W3C 文档对象模型 （DOM） 是中立于平台和语言的接口，
它允许程序和脚本动态地访问和更新文档的内容、结构和样式。"

W3C DOM 标准被分为 3 个不同的部分：
    核心 DOM - 针对任何结构化文档的标准模型
    XML DOM - 针对 XML 文档的标准模型
    HTML DOM - 针对 HTML 文档的标准模型

什么是 XML DOM？
XML DOM 定义了所有 XML 元素的对象和属性，以及访问它们的方法。

什么是 HTML DOM？
HTML DOM 定义了访问和操作 HTML 和 XML 文档的标准方法。
HTML DOM 定义了所有 HTML 元素的对象和属性，以及访问它们的方法。
HTML DOM 是：
    HTML 的标准对象模型
    HTML 的标准编程接口
    W3C  标准

HTML DOM 节点
在 HTML DOM 中，所有事物都是节点。DOM 是被视为节点树的 HTML。
DOM Nodes
DOM 节点
根据 W3C 的 HTML DOM 标准，HTML 文档中的所有内容都是节点：
    整个文档是一个文档节点
    每个 HTML 元素是元素节点
    HTML 元素内的文本是文本节点
    每个 HTML 属性是属性节点

HTML DOM 节点树
    HTML DOM 将 HTML 文档视作树结构。这种结构被称为节点树：

    节点父、子和同胞
    节点树中的节点彼此拥有层级关系。

    我们常用父（parent）、子（child）和同胞（sibling）等术语来描述这些关系。
    父节点拥有子节点。同级的子节点被称为同胞（兄弟或姐妹）。

    在节点树中，顶端节点被称为根（root）。
    每个节点都有父节点、除了根（它没有父节点）。
    一个节点可拥有任意数量的子节点。
    同胞是拥有相同父节点的节点。

<html>
  <head>
    <meta charset="utf-8">
    <title>DOM 教程</title>
  </head>
  <body>
    <h1>DOM 课程1</h1>
    <p>Hello world!</p>
  </body>
</html>

从上面的 HTML 中：

<html> 节点没有父节点；它是根节点
<head> 和 <body> 的父节点是 <html> 节点
文本节点 "Hello world!" 的父节点是 <p> 节点

<html> 节点拥有两个子节点：<head> 和 <body>
<head> 节点拥有两个子节点：<meta> 与 <title> 节点
<title> 节点也拥有一个子节点：文本节点 "DOM 教程"
<h1> 和 <p> 节点是同胞节点，同时也是 <body> 的子节点

<head> 元素是 <html> 元素的首个子节点
<body> 元素是 <html> 元素的最后一个子节点
<h1> 元素是 <body> 元素的首个子节点
<p> 元素是 <body> 元素的最后一个子节点

HTML DOM 方法
    HTML DOM 方法是我们可以在节点（HTML 元素）上执行的动作。
    HTML DOM 属性是我们可以在节点（HTML 元素）设置和修改的值。

编程接口
    可通过 JavaScript （以及其他编程语言）对 HTML DOM 进行访问。
    所有 HTML 元素被定义为对象，而编程接口则是对象方法和对象属性。
    方法是您能够执行的动作（比如添加或修改元素）。
    属性是您能够获取或设置的值（比如节点的名称或内容）。

getElementById() 方法返回带有指定 ID 的元素：
    <script>
    x=document.getElementById("intro");
    document.write("<p>段落的文本为: " + x.innerHTML + "</p>");
    </script>

HTML DOM 对象 - 方法和属性

一些常用的 HTML DOM 方法：
    getElementById(id) - 获取带有指定 id 的节点（元素）
    appendChild(node) - 插入新的子节点（元素）
    removeChild(node) - 删除子节点（元素）
一些常用的 HTML DOM 属性：
    innerHTML - 节点（元素）的文本值
    parentNode - 节点（元素）的父节点
    childNodes - 节点（元素）的子节点
    attributes - 节点（元素）的属性节点

DOM 对象方法
这里提供一些您将在本教程中学到的常用方法：

方法	                        描述
getElementById()	    返回带有指定 ID 的元素。
getElementsByTagName()	返回包含带有指定标签名称的所有元素的节点列表（集合/节点数组）。
getElementsByClassName()返回包含带有指定类名的所有元素的节点列表。
appendChild()	        把新的子节点添加到指定节点。
removeChild()	        删除子节点。
replaceChild()	        替换子节点。
insertBefore()	        在指定的子节点前面插入新的子节点。
createAttribute()	    创建属性节点。
createElement()	        创建元素节点。
createTextNode()	    创建文本节点。
getAttribute()	        返回指定的属性值。
setAttribute()	        把指定属性设置或修改为指定的值。

下面的例子获取 id="intro" 的元素：
    document.getElementById("intro");
下面的例子返回包含文档中所有 <p> 元素的列表：
    document.getElementsByTagName("p");
下面的例子返回包含文档中所有 <p> 元素的列表，并且这些 <p> 元素应该是 id="main" 的元素的后代（子、孙等等）：   
    document.getElementById("main").getElementsByTagName("p");
下面的例子返回包含 class="intro" 的所有元素的一个列表：
    document.getElementsByClassName("intro");

HTML DOM - 修改
修改 HTML = 改变元素、属性、样式和事件。
修改 HTML DOM 意味着许多不同的方面：
    改变 HTML 内容
    改变 CSS 样式
    改变 HTML 属性
    创建新的 HTML 元素
    删除已有的 HTML 元素
    改变事件（处理程序）

创建 HTML 内容
下面的例子改变一个 <p> 元素的 HTML 内容：
    <p id="p1">Hello World!</p>

    <script>
    document.getElementById("p1").innerHTML="新文本!";
    </script>

    <p>段落通过脚本来修改内容。</p>

改变 HTML 样式
下面的例子改变一个段落的 HTML 样式：
    <p id="p1">Hello world!</p>
    <p id="p2">Hello world!</p>
    
    <script>
    document.getElementById("p2").style.color="blue";
    document.getElementById("p2").style.fontFamily="Arial";
    document.getElementById("p2").style.fontSize="larger";
    </script>

创建新的 HTML 元素
如需向 HTML DOM 添加新元素，您首先必须创建该元素（元素节点），然后把它追加到已有的元素上。
    <div id="div1">
    <p id="p1">这是一个段落。</p>
    <p id="p2">这是另一个段落。</p>
    </div>
    <script>
    var para=document.createElement("p");
    var node=document.createTextNode("这是一个新段落。");
    para.appendChild(node);
    var element=document.getElementById("div1");
    element.appendChild(para);
    </script>

使用事件
HTML DOM 允许您在事件发生时执行代码。
当 HTML 元素"有事情发生"时，浏览器就会生成事件：
    在元素上点击
    加载页面
    改变输入字段

下面两个例子在按钮被点击时改变 <body> 元素的背景色：
1.
    <input type="button"
    onclick="document.body.style.backgroundColor='lavender';"
    value="修改背景颜色">
2.
    <script>
    function ChangeBackground()
    {
        document.body.style.backgroundColor="lavender";
    }
    </script>
    
    <input type="button" onclick="ChangeBackground()" value="修改背景颜色" />

下面的例子在按钮被点击时改变 <p> 元素的文本：
    <p id="p1">Hello world!</p>
    
    <script>
    function ChangeText()
    {
        document.getElementById("p1").innerHTML="Hello Runoob!";
    }
    </script>
    
    <input type="button" onclick="ChangeText()" value="修改文本" />

HTML DOM - 元素 
添加、删除和替换 HTML 元素。

创建新的 HTML 元素 - createElement()
    实例    
    <div id="div1">
    <p id="p1">这是一个段落。</p>
    <p id="p2">这是另一个段落。</p>
    </div>
    <script>
    var para=document.createElement("p");
    var node=document.createTextNode("这是一个新段落。");
    para.appendChild(node);
    var element=document.getElementById("div1");
    element.appendChild(para);
    </script>

    实例解析
    这段代码创建了一个新的 <p> 元素：
    var para=document.createElement("p");
    如需向 <p> 元素添加文本，您首先必须创建文本节点。这段代码创建文本节点：
    var node=document.createTextNode("这是一个新段落。");
    然后您必须向 <p> 元素追加文本节点：
    para.appendChild(node);
    最后，您必须向已有元素追加这个新元素。这段代码查找到一个已有的元素：
    var element=document.getElementById("div1");
    这段代码向这个已存在的元素追加新元素：
    element.appendChild(para);

创建新的 HTML 元素 - insertBefore()
    上一个例子中的 appendChild() 方法，将新元素作为父元素的最后一个子元素进行添加。
    如果不希望如此，您可以使用 insertBefore() 方法：

删除已有的 HTML 元素
    如需删除 HTML 元素，您必须清楚该元素的父元素：
    实例
    <div id="div1">
        <p id="p1">这是一个段落。</p>
        <p id="p2">这是另一个段落。</p>
    </div>
    <script>
    var parent=document.getElementById("div1");
    var child=document.getElementById("p1");
    parent.removeChild(child);
    </script>

    实例解析
    这个 HTML 文档包含一个带有两个子节点（两个 <p> 元素）的 <div> 元素：
    <div id="div1">
    <p id="p1">这是一个段落。</p>
    <p id="p2">这是另一个段落。</p>
    </div>
    查找 id="div1" 的元素：
    var parent=document.getElementById("div1");
    查找 id="p1" 的 <p> 元素：
    var child=document.getElementById("p1");
    从父元素中删除子元素：
    parent.removeChild(child);

替换 HTML 元素
    如需替换 HTML DOM 中的元素，请使用 replaceChild() 方法：
    实例
    <div id="div1">
    <p id="p1">这是一个段落。</p>
    <p id="p2">这是另外一个段落。</p>
    </div>
    
    <script>
    var parent=document.getElementById("div1");
    var child=document.getElementById("p1");
    var para=document.createElement("p");
    var node=document.createTextNode("这是一个新的段落。");
    para.appendChild(node);
    parent.replaceChild(para,child);
    </script>

HTML DOM - 事件
    HTML DOM 允许 JavaScript 对 HTML 事件作出反应。
    当事件发生时，可以执行 JavaScript，比如当用户点击一个 HTML 元素时。
    如需在用户点击某个元素时执行代码，请把 JavaScript 代码添加到 HTML 事件属性中：
        
    onclick=JavaScript

HTML 事件的例子：
    当用户点击鼠标时
    当网页已加载时
    当图片已加载时
    当鼠标移动到元素上时
    当输入字段被改变时
    当 HTML 表单被提交时
    当用户触发按键时

在本例中，当用户点击时，会改变 <h1> 元素的内容：
    
    <h1 onclick="this.innerHTML='Ooops!'">点击文本!</h1>

HTML 事件属性
    如需向 HTML 元素分配事件，您可以使用事件属性。
    向 button 元素分配一个 onclick 事件：
    
    <button onclick="displayDate()">点我</button>

使用 HTML DOM 来分配事件
    HTML DOM 允许您使用 JavaScript 向 HTML 元素分配事件：
    为 button 元素分配 onclick 事件：
    名为 displayDate 的函数被分配给了 id=myButn" 的 HTML 元素。当按钮被点击时，将执行函数。
    
    document.getElementById("myBtn").onclick=function(){displayDate()};

onload 和 onunload 事件
    当用户进入或离开页面时，会触发 onload 和 onunload 事件。
    onload 事件可用于检查访客的浏览器类型和版本，以便基于这些信息来加载不同版本的网页。
    onload 和 onunload 事件可用于处理 cookies。
    实例：    
         <body onload="checkCookies()">

onchange 事件
    onchange 事件常用于输入字段的验证。
    下面的例子展示了如何使用 onchange。当用户改变输入字段的内容时，将调用 upperCase() 函数。
    实例：
        <input type="text" id="fname" onchange="upperCase()">

onmouseover 和 onmouseout 事件
onmouseover 和 onmouseout 事件可用于在鼠标指针移动到或离开元素时触发函数。
    实例：
    <!DOCTYPE html>
    <html><head>
    <meta charset="utf-8">
    </head>
    <body>

    <div onmouseover="mOver(this)" onmouseout="mOut(this)" style="background-color:#D94A38;width:120px;height:20px;padding:40px;">Mouse Over Me</div>

    <script>
    function mOver(obj)
    {
        obj.innerHTML="Thank You"
    }

    function mOut(obj)
    {
        obj.innerHTML="Mouse Over Me"
    }
    </script>

    </body>
    </html>

HTML DOM 导航
    通过 HTML DOM，您能够使用节点关系在节点树中导航。

HTML DOM 节点列表
    getElementsByTagName() 方法返回节点列表。节点列表是一个节点数组。
    下面的代码选取文档中的所有 <p> 节点：
    实例：
    var x=document.getElementsByTagName("p");

    可以通过下标号访问这些节点。如需访问第二个 <p>，您可以这么写：
    document.write("第二个段落的 innerHTML 内容为: " + x[1].innerHTML);

HTML DOM 节点列表长度
    length 属性定义节点列表中节点的数量。
    您可以使用 length 属性来循环节点列表：
    实例：
    x=document.getElementsByTagName("p");
    for (i=0;i<x.length;i++)
    { 
        document.write(x[i].innerHTML);
        document.write("<br>");
    }
    实例解析：
    获取所有 <p> 元素节点
    输出每个 <p> 元素的文本节点的值

导航节点关系
您能够使用三个节点属性：parentNode、firstChild 以及 lastChild ，在文档结构中进行导航。

    请看下面的 HTML 片段：
    <html>
    <head>
    <meta charset="utf-8">
    </head>
    <body>
    
    <p>Hello World!</p>
    <div>
    <p>DOM 是非常有用的!</p>
    <p>这个实例演示了节点的关系。</p>
    </div>
    
    </body>
    </html>
    实例解析：
    首个 <p> 元素是 <body> 元素的首个子元素（firstChild）
    <div> 元素是 <body> 元素的最后一个子元素（lastChild）
    <body> 元素是首个 <p> 元素和 <div> 元素的父节点（parentNode）

firstChild 属性可用于访问元素的文本：
    实例：
    <p id="intro">Hello World!</p>
    <script>
    x=document.getElementById("intro");
    document.write(x.firstChild.nodeValue);
    </script>

DOM 根节点
这里有两个特殊的属性，可以访问全部文档：
    document.documentElement - 全部文档
    document.body - 文档的主体
    实例：
    <p>Hello World!</p>
    <div>
        <p>DOM 是非常有用的!</p>
        <p>这个实例演示了 <b>document.body</b> 属性。</p>
    </div>
    
    <script>
    alert(document.body.innerHTML);
    </script>

childNodes 和 nodeValue
除了 innerHTML 属性，您也可以使用 childNodes 和 nodeValue 属性来获取元素的内容。
下面的代码获取 id="intro" 的 <p> 元素的值：

    实例：
    <p id="intro">Hello World!</p>
    
    <script>
    txt=document.getElementById("intro").childNodes[0].nodeValue;
    document.write(txt);
    </script>
    
    实例解析：
    在上面的例子中，getElementById 是一个方法，
    而 childNodes 和 nodeValue 是属性。
    在本教程中，我们将使用 innerHTML 属性。
    不过，学习上面的方法有助于对 DOM 树结构和导航的理解。